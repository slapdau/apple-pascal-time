; Useful macros, from the Pascal 1.3 manual, appendix 3D.

        .macro  POP
        pla
        sta     %1
        pla
        sta     %1+1
        .endm

        .macro  PUSH
        lda     %1+1
        pha
        lda     %1
        pha
        .endm

        .macro  RMVBIAS
        pla
        pla
        pla
        pla
        .endm

        .macro  MOVE
        lda     %1
        sta     %2
        lda     %1+1
        sta     %2+1
        .endm

        .macro  SAVEREGS
        .if     "%1"=""
        ZPAGE LOCATION NOT SPECIFIED
        .endc
        .if     "%2"<>""        ;Check for first register
        .if     "%2"="A"        ;Accumulator?
        sta     %1
        .else
        .if     "%2"="X"        ;X register?
        stx     %1
        .else
        .if     "%2"="Y"        ;Y register?
        sty     %1
        .endc
        .endc
        .endc
        .endc
        
        .if     "%3"<>""        ;Check for second register
        .if     "%3"="A"        ;Accumulator?
        sta     %1+1
        .else
        .if     "%3"="X"        ;X register?
        stx     %1+1
        .else
        .if     "%3"="Y"        ;Y register?
        sty     %1+1
        .endc
        .endc
        .endc
        .endc

        .if     "%4"<>""        ;Check for third register
        .if     "%4"="A"        ;Accumulator?
        sta     %1+2
        .else
        .if     "%4"="X"        ;X register?
        stx     %1+2
        .else
        .if     "%4"="Y"        ;Y register?
        sty     %1+2
        .endc
        .endc
        .endc
        .endc
        .endm

        .macro  RESTREGS
        .if     "%1"=""
        ZPAGE LOCATION NOT SPECIFIED
        .endc
        .if     "%2"<>""        ;Check for first register
        .if     "%2"="A"        ;Accumulator?
        lda     %1
        .else
        .if     "%2"="X"        ;X register?
        ldx     %1
        .else
        .if     "%2"="Y"        ;Y register?
        ldy     %1
        .endc
        .endc
        .endc
        .endc
        
        .if     "%3"<>""        ;Check for second register
        .if     "%3"="A"        ;Accumulator?
        lda     %1+1
        .else
        .if     "%3"="X"        ;X register?
        ldx     %1+1
        .else
        .if     "%3"="Y"        ;Y register?
        ldy     %1+1
        .endc
        .endc
        .endc
        .endc

        .if     "%4"<>""        ;Check for third register
        .if     "%4"="A"        ;Accumulator?
        lda     %1+2
        .else
        .if     "%4"="X"        ;X register?
        ldx     %1+2
        .else
        .if     "%4"="Y"        ;Y register?
        ldy     %1+2
        .endc
        .endc
        .endc
        .endc
        .endm
        
        .macro  SET
        lda     #%1
        ora     %2
        sta     %2
        .endm
        
        .macro  RESET
MASK    .equ    FF
        lda #%1^MASK            ;^ is EXCLUSIVE OR
        and %2
        sta %2
        .endm
        
        .macro  SWITCH
        .if     "%1"<>""        ;If param1 then
        lda     %1              ;Load A with index
        .endc
        .if     "%2"<>""        ;If param2 then
        cmp     #%2+1           ;Perform bounds check
        bcs     $099            ;on switch index
        .endc
        asl     a
        tay
        lda     %3+1,y          ;Get switch address from the
        pha                     ;table and push onto stack
        lda     %3,y
        pha
        .if     "%4"<>"*"       ;If param4 <> * then
        rts                     ;Exit to code
        .endc                   ;Else Continue
$099
        .endm
        
        .macro  MOVEDATA
        .if %3=0
        ZERO IS A BAD COUNT
        .endc
        ldx     #%3
$99     lda     %1-1,x
        sta     %2-1,x
        dex
        bne     $99             ;Loop until done
        .endm

        .macro  MOVEDINC
        .if %3=0
        ZERO IS A BAD COUNT
        .endc
        ldx     #0
$99     lda     %1,x
        sta     %2,x
        inx
        cpx     #%3
        bcc     $99             ;Loop until done
        .endm
        
        .macro  BITBRNCH
        .if     "%2"=""
        .if     "%3"=""
        NO BITS SPECIFIED       ;Generate an error
        .else
        lda     #%3
        and     %1
        beq     %4              ;Bits off only
        .endc
        .else
        lda     #%2
        and     %1
        eor     #%2
        .if     "%3"=""
        beq     %4              ;Bits on only
        .else
        bne     $099
        lda     #%3
        and     %1
        beq     %4              ;Both conditions have been met
$099
        .endc
        .endc
        .endm
        
        .macro  NOTBITBR
        .if     "%2"=""
        .if     "%3"=""
        NO BITS SPECIFIED       ;Generate an error
        .else
        lda     #%3
        and     %1
        bne     %4              ;Bits off only
        .endc
        .else
        lda     #%2
        and     %1
        eor     #%2
        .if     "#%3"=""        ;Bits on only
        bne     %4
        .else
        bne     %4
        lda     #%3
        and     %1
        bne     %4              ;Both conditions have been met
        .endc
        .endc
        .endm
        
