(*
 * Copyright 2020 Craig McGeachie
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Licnese is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *)

program MkYrTab;
(* Makes the year table for the Thunder Clock driver.
Outputs a Pascal Assembler pseudo op defining the seven
bytes of a year table to be included in the driver. *)

    const
        datafile = '%:mkyrtab.data';
        daysPerWeek = 7;
        tabsize = 7;

    type
        monthenum = (NoMnth,Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec);
        monthdef = record
            name:string[3];
            days:integer;
        end; {monthdef}
        daterec = record
            day:integer;
            month:monthenum;
            year:integer;
        end; {daterec}
        yeartab = array[0..6] of integer;

    var
        days:array[0..6] of string[3];
        months:array[Jan..Dec] of monthdef;
        dateToday:daterec;
        dayOfWeek:integer;
        input:string;
        inputOk:boolean;
        table:yeartab;

    procedure ToUpper(var str:string);
    (* Case fold a string to upper case. The parameter is modified in
    place. *)
    
        var
            mask:boolean;
            idx:integer;
    
    begin
        (* Obscure. From section on Bit Logic Examples *)
        (* Apple Pascal 1.3 Manual, Part III, Chap. 6 *)
        mask := not odd(32);
        for idx := 1 to length(str) do 
            str[idx] := chr(ord (mask and odd(ord(str[idx]))));
    end;
    
    function modulo(value, divisor: integer):integer;
    (* Implement the modulo operation as though with Euclidian division. *)
    
    begin
        if value >= 0 then
            modulo := value mod divisor
        else
            modulo := abs(divisor) - ((value + 1) mod abs(divisor)) - 1
    end;
    
    procedure ReadData;
    (* Load in the supporting application data. These are the names of
    months and days, and the number of days per month. The data are used
    to parse and validate user input. *)
    
        var
            f:text;
            dayidx:integer;
            mthidx:monthenum;
            name:string;
            
    begin
        reset(f,datafile);
        for dayidx := 0 to 6 do begin
            readln(f, name);
            ToUpper(name);
            days[dayidx] := name;
        end;
        for mthidx := Jan to Dec do begin
            readln(f, name, months[mthidx].days);
            ToUpper(name);
            months[mthidx].name := name;
        end;
        close(f);
    end;

    function UIntVal(input:string):integer;
    (* Parse a string into an unsigned integer. The string must
    only contain digits or the parse fails. A failed parse is
    indicated by returning -1. *)
    
        var
            result,index:integer;
            c:char;
    
    begin
        if length(input) = 0 then begin
            UIntVal := -1;
            exit(UIntVal);
        end;
        result := 0;
        for index := 1 to length(input) do begin
            c := input[index];
            if (c < '0') or (c > '9') then begin
                UIntVal := -1;
                exit(UIntVal);
            end;
            result := result * 10 + ord(c) - ord('0');
        end;
        UIntVal := result;
    end;
    
    function MonthVal(input:string):monthenum;
    (* Parse a month value from a string. The parse is
    case insensitive, but the input must be exactly 3 characters
    in length. The special return value of NoMnth indicates a
    failed parse. *)
    
        var 
            index:monthenum;
    
    begin
        ToUpper(input);
        for index := Jan to Dec do begin
            if input = months[index].name then begin
                MonthVal := index;
                exit(MonthVal);
            end;
        end;
        MonthVal := NoMnth;
    end;
    
    function DowVal(input:string):integer;
    (* Parse a string and return a number from 0 to 6 representing
    the day of the week. The parse is case insensitive, but the
    input must be exactly 3 characters. Sun to Sat is represented
    by 0 to 6 respectively. The special return value of -1 means
    the parse failed. *)
    
        var
            index:integer;
    
    begin
        ToUpper(input);
        for index := 0 to 6 do begin
            if input = days[index] then begin
                DowVal := index;
                exit(DowVal);
            end;
        end;
        DowVal := -1;
    end;
    
    function LeapYear(year:integer):boolean;
    (* Return true if the year is a leap year in the Gregorian
    calendar. *)
    
    begin
       LeapYear :=
           (((year mod 4) = 0) and not ((year mod 100) = 0))
           or ((year mod 400) = 0);
    end;
    
    function DayOfYear(date:daterec):integer;
    (* Return an integer representing the day of the year for a
    date. January the 1st is 1. December the 31st is either 365
    or 366 depending on whether the year is a leap year. *)
    
        var
            index:monthenum;
            total:integer;
    
    begin
        total := 0;
        for index := Jan to pred(date.month) do
            total := total + months[index].days;
        if LeapYear(date.year) and (ord(date.month) > ord(Feb)) then
            total := total + 1;
        DayOfYear := total + date.day;
    end;
    
    function DatePattern(input:string):boolean;
    (* Validate an input string to see if it has the basic structure
    to be a valid date: 11 characters long with dashes in the correct
    positions between day, month and year. *)
    
        var
            index:integer;
    
    begin
        DatePattern := true;
        if length(input) <> 11 then begin
            DatePattern := false;
            exit(DatePattern);
        end;
        DatePattern := (input[3] = '-') and (input[7] = '-');
    end;
    
    function ParseDate(input:string; var date:dateRec):boolean;
    (* Parse an input into a date. The result is placed in a
    reference to a date record. The boolean return is true if
    the parse was succesful. *)
    
        var
            part:string;
            
    begin
        if not DatePattern(input) then begin
            ParseDate := false;
            exit(ParseDate);
        end;
        
        date.year := UIntVal(copy(input, 8, 4));
        if date.year < 1582 then begin
            ParseDate := false;
            exit(ParseDate);
        end;
        
        date.month := MonthVal(copy(input, 4, 3));
        if date.month = NoMnth then begin
            ParseDate := false;
            exit(ParseDate);
        end;
        
        date.day := UIntVal(copy(input, 1, 2));
        if (date.day < 1) or (date.day > months[date.month].days) then begin
           ParseDate := false;
           exit(ParseDate);
        end;
        
        ParseDate := true;
    end;
    
    function ParseDow(input:string; var dayOfWeek:integer):boolean;
    (* Parse an input into the day of the week (1..7 representing
    Sun..Sat). The boolean return is true if the parse is successful. *)
    
    begin
       if length(input) < 3 then begin
           ParseDow := false;
           exit(ParseDow);
       end;
       dayOfWeek := DowVal(copy(input, 1, 3));
       ParseDow := dayOfWeek <> -1;
    end;
    
    function FirstIndex(dateToday:daterec; dayOfWeek: integer):integer;
    
        var
            firstDow:integer; (* Day of week, 1st Jan *)
        
    begin
        firstDow := modulo(
            dayOfWeek - (DayOfYear(dateToday) - 1),
            daysPerWeek
        );
        FirstIndex := modulo(1 - firstDow, tabsize);
    end;
    
    procedure MakeTable(
        dateToday:daterec;
        dayOfWeek:integer;
        var table:yeartab
    );
    (* Make the year table for the ThunderClock driver. *)
    
        var
            start,index:integer;
            year:integer;
    
    begin
        start := FirstIndex(dateToday, dayOfWeek);
        index := start;
        year := dateToday.year;
        repeat
            table[index] := modulo(year, 100);
            index := modulo(index - 1, tabsize);
            if LeapYear(year) and not (index = start)
            then begin
                table[index] := modulo(year, 100);
                index := modulo(index - 1, tabsize);
            end;
            year := year + 1;
        until index = start;
    end;
    
    procedure WriteTable(var table:yeartab);
    (* Write out the year table for the ThunderClock driver.
    Asks the user for an output file, defaulting to CONSOLE:
    if <ret> is pressed without entering anything else. *)
    
        var
            outname:string;
            output:text;
            index:integer;
    
    begin
        writeln();
        write('Output file (<ret> for CONSOLE:)? ');
        readln(outname);
        if length(outname) = 0 then
            outname := 'CONSOLE:';
        rewrite(output, outname);
        write(output,'        .byte   ');
        for index := 0 to tabsize-2 do begin
            write(output, table[index], '., ');
        end;
        writeln(output, table[tabsize-1], '.');
        close(output, lock);
    end;
    
begin
    ReadData;
    repeat
        writeln();
        write('Enter today''s date (dd-mmm-yyyy)    -> ');
        readln(input);
        inputOk := ParseDate(input, dateToday);
    until inputOk;
    repeat
        writeln();
        write('Enter the day of the week (e.g. Wed) -> ');
        readln(input);
        inputOk := ParseDow(input, dayOfWeek);
    until inputOk;
    MakeTable(dateToday, dayOfWeek, table);
    WriteTable(table);
end.

