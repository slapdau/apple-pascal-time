        .include STDMACRO

CONCKAD         .equ    0
ACJVAFLD        .equ    0E2
        
        .proc   U128DR
        
        sta     AREG           ; Save AREG contents (dev#)
        pop     RETURN
        
        ; Branch on XREG for INIT, READ, WRITE, STATUS
        txa
        cmp     #2
        beq     INIT
        cmp     #4
        beq     STATUS
        cmp     #0
        beq     PMS
        cmp     #1
        beq     PMS
        
        ; In case the XREG isn't valid
        jmp     RET
        
PMS     pop     BLKNUM
        pop     BYTECNT
        pop     BUFADR
        pop     UNITNUM
        pop     CONTROL
        txa
        bne     WRITE

READ    jsr     GOTOCK
        ; Driver's read code goes HERE
        jmp     RET

WRITE   jsr     GOTOCK
        ; Driver's write code goes HERE
        jmp     RET

GOTOCK  ldy     #55.            ; Offset to address of CONCK
        lda     @ACJVAFLD,y
        sta     CONCKAD
        iny
        lda     @ACJVAFLD,y
        sta     CONCKAD+1
        lda     CKR+1           ; Set it up to return to
        pha                     ; CONCKRT after the CONCK call
        lda     CKR
        pha
        jmp     @CONCKAD        ; Jump to CONCK
CONCKRT rts
CKR     .word   CONCKRT-1

INIT    ; Driver's code for initialisation goes HERE
        jmp     RET

STATUS  pop     BUFADR
        pop     CONTROL
        ; Driver's code for status information goes HERE
        ; Fall through to RET

RET     push    RETURN
        lda     AREG

RETURN  .word   0               ; Can't use zero page for these
AREG   .word   0               ; since we leave our environment
                                ; when going to CONCK
CONTROL .word   0
UNITNUM .word   0
BUFADR  .word   0
BYTECNT .word   0
BLKNUM  .word   0

        .end
        
