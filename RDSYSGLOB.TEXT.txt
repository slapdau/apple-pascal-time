        .include STDMACRO

;----------------------------------------------------------
; Pascal zero page temporary usage.
RETURN          .equ    0
CURR_MP         .equ    2
SRC_START       .equ    30
SRC_END         .equ    32
DST_START       .equ    34

;----------------------------------------------------------
; Zero page addresses of virtual machine registers.
BASE     .equ    50      ; Base procedure pointer
MP       .equ    52      ; Markstack pointer
JTAB     .equ    54      ; Jump table pointer
SEG      .equ    56      ; Segment pointer
IPC      .equ    58      ; Interpreter program counter
NP       .equ    5A      ; New pointer
KP       .equ    5C      ; Program stack pointer
STRP     .equ    5E      ; String pointer

;----------------------------------------------------------
; Offset addresses from MP
MSSTAT  .equ    00      ; Static link to enclosing scope
MSDYN   .equ    02      ; Dynamic link to calling routine
MSJTAB  .equ    04      ; Saved value of callers JTAB register
MSSEG   .equ    06      ; Saved value of callers SEG register
MSIPC   .equ    08      ; Saved value of callers IPC register
MSSP    .equ    0A      ; Saved value of callers expression SP
MSSIZE  .equ    0C      ; Total markstack size in bytes

;----------------------------------------------------------
; Offset addresses from JTAB
; $00                   Procedure number
; $01                   Lexical level
; $02-$03               Enter IC
; $04-$05               Exit IC
; $06-$07               Parameter size (in bytes)
; $08-$09               Data size (in bytes)
JTAB_SZ .equ    0A

        .func   RDSYSGLOB,0
;----------------------------------------------------------
; Main function.
;----------------------------------------------------------
        pop     return
        rmvbias
        jsr     get_sys_ms      ; Pointer to markstack left in $02-$03
        clc                     ; Adjust returned pointer to past markstack
        lda     02
        adc     #MSSIZE%256.
        sta     02
        lda     03
        adc     #MSSIZE/256.
        sta     03
        ; Slight cheat here. Parameter size for the main system procedure
        ; is zero. So we skip reading it from the attribute table and 
        ; adjusting the returned value to find the local variables.
        push    02
        push    return
        rts

get_sys_ms
;----------------------------------------------------------
; Get the base address of the Pascal system global variables.
;
;       Prime with MP and JTAB
; nextproc:
;       Copy Attribute table
;       if lexical level = $FF then jump to done
;       Follow MSDYN and MSJTAB
;       jump to nextproc
; done:
;       offset from markstack to local variables
;       return local variables
;
; Pascal P-Code blocks are stored in two different locations on a
; 128k system. User P-Code is stored in auxiliary memory below $C000.
; P-Code for the operating system is stored in main memory above $D000.
;----------------------------------------------------------
        ; Initialise the search by copying pointers to the current
        ; markstack and attribute table.
        move    MP,CURR_MP
        move    JTAB,SRC_START

        ; Copy the current attribute table to a local copy where
        ; we can examine it.
nextproc
        clc
        ; JTAB points to the last word. Adjust accordingly.
        lda     SRC_START
        adc     #1
        sta     SRC_END
        lda     SRC_START+1
        adc     #0
        sta     SRC_END+1
        sec
        lda     SRC_START
        sbc     #<JTAB_SZ-2>%255.
        sta     SRC_START
        lda     SRC_START+1
        sbc     #<JTAB_SZ-2>/255.
        sta     SRC_START+1
        move    TBL_ADDR,DST_START
        
        ; Is this a main or auxiliary copy?
        lda     SRC_START+1
        cmp     #0C0
        bcs     $1
                
        ; Below $C000, auxiliary copy
        clc                             ; From auxiliary to main
        jsr     auxmove
        jmp     $2
        
        ; Above $C000, main copy
$1      jsr     main_cpy
                
        ; If the current lexical level is -1, then we've found
        ; the routine we're looking for.
$2      lda     TBL_CPY+JTAB_SZ-1
        cmp     #0FF            
        beq     done
                
        ; Otherwise we need to follow the dynamic link up the
        ; call stack.
        ; n.b. We need to follow dynamic links instead of static links
        ; to be sure of getting the correct attribute table pointers.
        ldy     #MSDYN          ; Temporarily store MSDYN on the stack
        lda     @CURR_MP,y
        pha
        iny
        lda     @CURR_MP,y
        pha
        iny
        lda     @CURR_MP,y      ; Get ready to copy the next attribute
        sta     SRC_START       ; table.
        iny
        lda     @CURR_MP,y
        sta     SRC_START+1
        pla                     ; Point to the next markstack.
        sta     CURR_MP+1
        pla
        sta     CURR_MP
        jmp     nextproc        ; Read the next attribute table.
                
done
        rts                     ; Leave markstack pointer in $02-$03

TBL_CPY
        .block  0A
TBL_ADDR
        .word   TBL_CPY         ; For the relocated address


auxmove
;----------------------------------------------------------
; Adapt the firmware AUXMOVE routine to Apple Pascal zero
; page usage. Have to adapt rather than copy and modify.
; Can't run code in the $0200-$BFFF space affected by the
; RAMRD and RAMWRT switches.
; Carry         0 = Move from main to auxiliary memory
;               1 = Move from auxiliary to main memory
; $30-$31       Source start
; $32-$33       Source end
; $34-$35       Destination start
;----------------------------------------------------------
auxmv1  .equ 0C311
        pha             ; Save accumulator and X register
        txa
        pha
        movedata 3c,auxtmp,8
        move    30,3C
        move    32,3E
        move    34,42
        jsr     auxmv1
        movedata auxtmp,3c,8
        pla             ; Restore accumulator and X register
        tax
        pla
        rts
        
auxtmp  .block  8

main_cpy
;----------------------------------------------------------
; Copy a block of memory.
; $30-$31       Source start
; $32-$33       Source end
; $34-$35       Destination start
;----------------------------------------------------------
        pha
        tya
        pha
        pla
        ldy     #0      ; Dummy index.
$1      lda     @SRC_START,y
        sta     @DST_START,y
        inc     DST_START
        bne     $2
        inc     DST_START+1
$2      lda     SRC_START
        cmp     SRC_END
        lda     SRC_START+1
        sbc     SRC_END+1
        inc     SRC_START
        bne     $3
        inc     SRC_START+1
$3      bcc     $1
        tay
        pla
        rts

;----------------------------------------------------------
; Put the processor into an endless loop. Requires the
; debugger to advance the IC to the RTS opcode and continue.
;----------------------------------------------------------
halt    clc
        bcc     *       ; Loop forever
        rts
        
        .end
        
