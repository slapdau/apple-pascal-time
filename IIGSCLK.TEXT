; Copyright 2020 Craig McGeachie
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;      http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the Licnese is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
  
        .macro  POP
        pla
        sta     %1
        pla
        sta     %1+1
        .endm

        .macro  PUSH
        lda     %1+1
        pha
        lda     %1
        pha
        .endm

        .macro  RMVBIAS
        pla
        pla
        pla
        pla
        .endm
        
        .macro  MOVE
        lda     %1
        sta     %2
        lda     %1+1
        sta     %2+1
        .endm

        .func InitClock,0
        .ref RdVec
        .ref namePtr
        .ref TestGs

RETURN  .equ    0.
        
        jsr     TestGs
        bcc     exit
        
; Store vectors
        pop     namePtr
        pop     RdVec
        
exit    pop     RETURN
        rmvbias
        lda     #0
        pha
        rol     a
        pha
        push    RETURN
        rts
        
        .proc   ReadClock,1

; Layout of the record pointed to by PTIME.
; |---1--| |---0--|
; yyyyyyyd ddddMMMM
; |---3--| |---2--|
; 00000mmm mmmhhhhh
; |---5--| |---4--|
; 00000000 00ssssss
; 21:24:45, 12-Jan-18 stored as:
; words 024c1, 00315, 0002d
; bytes 0c1, 024, 015, 003, 02d, 000

RETURN  .equ    0.
PTIME   .equ    2.
        
        pop     RETURN
        pop     PTIME
        push    RETURN
        push    PTIME
        
        jsr     CallRdVec
        
        rts

CallRdVec
        .def    RdVec
        jmp     @RdVec
RdVec  .word   ClrWkSpc

ClrWkSpc
        ; Zero out workspace for return.
        pop     PTIME
        lda     #0
        ldy     #5
$1      sta     @PTIME,y
        dey
        bpl     $1
        
        rts
        

        .proc   ClockName,1
        .def namePtr
        
RETURN  .equ    0.
FROM    .equ    2
TO      .equ    4

        pop     RETURN
        pop     TO
        push    RETURN
        
        move    namePtr,FROM
        ldy     #0
$1      lda     @FROM,y
        beq     $2
        iny
        beq     $2
        sta     @TO,y
        bne     $1
$2      tya
        ldy     #0
        sta     @TO,y
        
        rts

namePtr .word   NoClk

NoClk   .ascii  "<No Clock>"
        .byte   0

        .proc IIgs,0
        rts
        
STATEREG .equ   0C068
ROMBNK2 .equ    0C08A
LCBANK2 .equ    0C083
LCBANK1 .equ    0C08B
RDLCBNK .equ    0C011
RDLCRAM .equ    0C012

RETURN  .equ    0.
MEMSTS  .equ    2.

        ; Implement the test in Appendix B of the Apple IIgs Firmware
        ; Reference Manual.
        ; Note: This routine does not use the memory state register
        ; at $C068. The whole point of this routine is that we don't
        ; know yet if we're running in a IIgs.
        .def    TestGs
TestGs
        ; Save memory status and set read from ROM.
        rol     RDLCBNK
        rol     MEMSTS
        rol     RDLCRAM
        rol     MEMSTS
        lda     ROMBNK2
        
        ; Test the system ID bytes.
        lda     0FBB3
        cmp     #006
        bne     ClkBad
        lda     0FBC0
        cmp     #0E0
        bne     ClkBad
        lda     0FBBF
        cmp     #00
        bne     ClkBad
        
        ; Call the IIgs ID routine.
        ; An enhanced //e will leave the carry set.
        ; A IIgs will clear the carry and leave hardware status in the
        ; accumulator.
        sec
        jsr     0FE1F
        bcs     ClkBad
        and     #010    ; Test the built-in clock bit.
        sec
        bne     ClkGood
        
ClkBad  clc
ClkGood php

        ; Restore memory status. This is probably overkill. Should be safe
        ; to just assume R/W Language Card Bank 1.
        ror     MEMSTS
        bcc     $2
        ror     MEMSTS
        bcc     $1
        lda     LCBANK2
        lda     LCBANK2
        bcs     $2
$1      lda     LCBANK1
        lda     LCBANK1
        
$2      plp
        bcc     $9
        pop     RETURN
        push    RdVec
        push    NmPtr
        push    RETURN

$9      rts
        
PTIME   .equ    2.
TEMP    .equ    4.

RdVec   .word   RdTime
RdTime
        pop     RETURN
        pop     PTIME
        push    RETURN
        
        jsr     CallToolBox
        
        ; Seconds
        lda     #0
        ldy     #5
        sta     @PTIME,y
        pla
        dey
        sta     @PTIME,y
        
        ; Minutes
        lda     #0
        sta     TEMP
        clc
        pla
        ror     A
        ror     TEMP
        ror     A
        ror     TEMP
        ror     A
        ror     TEMP
        dey
        sta     @PTIME,y
        
        ; Hour
        pla
        ora     TEMP
        dey
        sta     @PTIME,y
        
        ; Year
        pla
$1      cmp     #100.
        bcc     $2
        sbc     #100.
        bcs     $1
$2      sta     TEMP
        
        ; Day
        pla
        clc
        adc     #1
        asl     A
        asl     A
        asl     A
        asl     A
        rol     TEMP
        sta     TEMP+1
        lda     TEMP
        dey
        sta     @PTIME,y
        
        ; Month
        pla
        clc
        adc     #1
        ora     TEMP+1
        dey
        sta     @PTIME,y
        
        ; Clear null byte and day of week from stack.
        pla
        pla
        
        rts
        
CallToolBox
INTSAV          .equ    4.
STATESAV        .equ    5.

        pop     RETURN
        
        lda     STATEREG
        sta     STATESAV
        and     #0CF
        sta     STATEREG
        
        php
        sei             ; Disable interupts. Doubt Pascal interrupt
        pla             ; handlers could cope.
        sta     INTSAV
        
        ; The following code blob is position independant 65816 code
        ; that calls ReadTimeHex in the IIgs Miscelaneous Tool Set.
        ; It's assembled externally.

        .byte   018             ; clc
        .byte   0FB             ; xce
        .byte   0C2,030         ; rep #$30
        .byte   0A9,000,000     ; lda #$0000
        .byte   048             ; pha
        .byte   048             ; pha
        .byte   048             ; pha
        .byte   048             ; pha
        .byte   0A2,003,00D     ; ldx #$0D03
        .byte   022,000,000,0E1 ; jsl $e10000
        .byte   038             ; sec
        .byte   0FB             ; xce
        
        ; After the return to the caller, the stack will look like:
        ; | Prev. Content|
        ; | weekday      | 1-7, with 1=Sunday
        ; | 0            |
        ; | month        | 0-11, with 0=January
        ; | day          | 0-30
        ; | curYear      | Current year minus 1900
        ; | hour         | 0-23
        ; | minute       | 0-59
        ; | second       | 0-59
        ; |--------------| <-- SP
        
        lda     INTSAV
        pha
        plp
        
        lda     STATESAV
        sta     STATEREG
        
        push    RETURN
        rts

Name    .ascii  "IIgs built-in clock"
        .byte   0
NmPtr   .word   Name

        .end

