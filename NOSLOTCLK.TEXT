; Copyright 2020 Craig McGeachie
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;      http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the Licnese is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
  
        .macro  POP
        pla
        sta     %1
        pla
        sta     %1+1
        .endm

        .macro  PUSH
        lda     %1+1
        pha
        lda     %1
        pha
        .endm

        .macro  RMVBIAS
        pla
        pla
        pla
        pla
        .endm

        .macro  MOVE
        lda     %1
        sta     %2
        lda     %1+1
        sta     %2+1
        .endm
        
RDCXROM .equ    0C015
CLCXROM .equ    0C007
STCXROM .equ    0C006
C8OFF   .equ    0CFFF

CLKWR   .equ    0C300
CLKRD   .equ    0C304

        .func InitClock,0
        .ref    RdVect
        .ref    namePtr
        .ref    TestNSC
        
RETURN  .equ    0.
        
        jsr     TestNSC
        bcc     ExitInit
        
        pop     namePtr
        pop     RdVect

ExitInit
        pop     RETURN
        rmvbias
        lda     #0
        pha
        rol     a
        pha
        push    RETURN
        rts


        .proc   ReadClock,1

; Layout of the record pointed to by PTIME.
; |---1--| |---0--|
; yyyyyyyd ddddMMMM
; |---3--| |---2--|
; 00000mmm mmmhhhhh
; |---5--| |---4--|
; 00000000 00ssssss
; 21:24:45, 12-Jan-18 stored as:
; words 024c1, 00315, 0002d
; bytes 0c1, 024, 015, 003, 02d, 000

RETURN  .equ    0.
PTIME   .equ    2.

        pop     RETURN
        pop     PTIME
        push    RETURN
        push    PTIME
        
        jsr     CallRdVec
        
        rts

CallRdVec
        ; Make a call to read the time in Pascal format if there is
        ; a clock. Otherwise just clear the return to zeros. Set by
        ; a call to InitClock.
        .def    RdVect
        jmp     @RdVect

RdVect  .word   ClrWkSpc
ClrWkSpc
        ; Zero out workspace for return.
        pop     PTIME
        lda     #0
        ldy     #5
$1      sta     @PTIME,y
        dey
        bpl     $1
        
        rts
        

        .proc   ClockName,1
        .def    namePtr

RETURN  .equ    0.
FROM    .equ    2.
TO      .equ    4.

        pop     RETURN
        pop     TO
        push    RETURN

        move    namePtr,FROM
        ldy     #0
$1      lda     @FROM,y
        beq     $2
        iny
        beq     $2
        sta     @TO,y
        bne     $1
$2      tya
        ldy     #0
        sta     @TO,y

        rts

namePtr .word   NoClk

NoClk   .ascii  "<No Clock>"
        .byte   0

        .proc   nsc,0
        rts

RETURN  .equ    0.
COUNT   .equ    2.
CLKTRY  .equ    3.
TEMP    .equ    4.
SMARK   .equ    5.

        .def    TestNSC
TestNSC
        ; We are going to try slot ROMs first.
        lda     #0CF
        ldy     #0FF
        sta     CDRdSw
        sty     CDRdSw-1
        sta     CDRsSw
        sty     CDRsSw-1
        ldy     #000
        sty     CDStSw-1
        
        ; Initialise counter
        lda     #000
        sta     COUNT

        ; Check slot 3 in system default state first.
        lda     #003
CkSlot  ora     #0C0
        sta     CDStSw
CkOthr  sta     CDUnlck
        sta     CDRstA2
        sta     CDRdClk
        lda     #003
        sta     CLKTRY
        ; Check that the returned values are sane.
GetDT   tsx
        stx     SMARK
        jsr     RdHexTime
        pla
        pla                     ; Month
        beq     ClkNxt
        cmp     #13.
        bcs     ClkNxt
        pla                     ; Day
        beq     ClkNxt
        cmp     #32.
        bcs     ClkNxt
        pla
        pla                     ; Hours
        cmp     #24.
        bcs     ClkNxt
        pla                     ; Minutes
        cmp     #60.
        bcs     ClkNxt
        pla
        pla
        dec     ClkTry
        bne     GetDT
        jmp     ClkGood
ClkNxt  ldx     SMARK
        txs
        inc     COUNT
        lda     COUNT
        cmp     #008
        bcc     CkSlot
        bne     ClkBad
        ; Fall through when COUNT == 8
        
        ; Try internal $C100-$CFFF ROM
        ; Modify driver to save CX ROM status, enable it, and restore it.
        lda     #0C0
        ldy     #015
        sta     CDRdSw
        sty     CDRdSw-1
        ldy     #007
        sta     CDStSw
        sty     CDStSw-1
        dey
        sta     CDRsSw
        sty     CDRsSw-1
        lda     #0C8
        bne     CkOthr

ClkBad  clc
        rts
        
ClkGood jsr     SetName
        pop     RETURN
        push    RdVec
        push    NmPtr
        push    RETURN
        sec
        rts

PTIME   .equ    2.

RdVec   .word   RdTime
RdTime
        pop     RETURN
        pop     PTIME
        push    RETURN
        
        jsr     RdHexTime
        
        
        pla                     ; Year
        sta     TEMP
        
        pla                     ; Month
        sta     TEMP+1
        
        pla                     ; Day
        asl     a
        asl     a
        asl     a
        asl     a
        rol     TEMP
        ora     TEMP+1
        ldy     #0
        sta     @PTIME,y
        lda     TEMP
        iny
        sta     @PTIME,y
        
        pla
        pla                     ; Hour
        sta     TEMP
        
        lda     #0
        sta     TEMP+1
        pla                     ; Minute
        asl     a
        asl     a
        rol     a
        rol     TEMP+1
        rol     a
        rol     TEMP+1
        rol     a
        rol     TEMP+1
        ora     TEMP
        iny
        sta     @PTIME,y
        lda     TEMP+1
        iny
        sta     @PTIME,y
        
        pla                     ; Second
        iny
        sta     @PTIME,y
        
        pla
        lda     #0
        iny
        sta     @PTIME,y
        
        rts

RdHexTime
INTSAVE .equ    6.
CXSAVE  .equ    7.

        pop     RETURN
        php                     ; Save interrupt state
        sei
        pla
        sta     INTSAVE
        lda     RDCXROM
CDRdSw  .equ    *-1
        sta     CXSAVE          ; Save ROM state
        sta     CLCXROM         ; Use internal ROM for the Cx pages
CDStSw  .equ    *-1
        
        jsr     UNLK_CLK
        ldx     #007
$2      jsr     RD_BYTE
        jsr     BCD2BIN
        pha
        dex
        bpl     $2

        lda     CXSAVE
        bpl     $1
        sta     STCXROM         ; Restore card ROM for the Cx pages
$1
CDRsSw  .equ    *-1
        lda     INTSAVE
        pha
        plp
        push    RETURN
        rts

UNLK_CLK
        lda     CLKRD
CDRstA2 .equ    *-1
        ldx     #007
ulkbyt  lda     unlkseq,x
        sec
        ror     a
ulkbit  pha
        lda     #000
        rol     a
        tay
        lda     CLKWR,Y
CDUnlck .equ    *-1
        pla
        lsr     a
        bne     ulkbit
        dex
        bpl     ulkbyt
        rts

unlkseq .byte   05C,0A3,03A,0C5,05C,0A3,03A,0C5

RD_BYTE
        lda     #000
        ldy     #007
rdBit   pha
        lda     CLKRD
CDRdClk .equ    *-1
        ror     A
        pla
        ror     A
        dey
        bpl     rdBit
        rts
        
BCD2BIN
        pha
        and     #00F
        sta     TEMP
        pla
        and     #0F0
        lsr     a
        pha
        lsr     a
        lsr     a
        adc     TEMP
        sta     TEMP
        pla
        adc     TEMP
        rts

                ; 21:24:45, 12-Jan-18
; TIMEVAL .word   024c1, 00315, 0002d

Name    .ascii  "No-Slot Clock "
NmSfx
        .block  66.
NmPtr   .word   Name
NmCrd   .ascii  "(slot "
SltNum  .ascii  "X)"
        .byte   0
NmCrdP  .word   NmCrd
NmDef   .ascii  "(default)"
        .byte   0
NmDefP  .word   NmDef
NmInt   .ascii  "(internal)"
        .byte   0
NmIntP  .word   NmInt
        
SetName
        lda     COUNT
        cmp     #0
        bne     $12
        move    NmDefP,TEMP
        jmp     $0
$12     cmp     #8
        bne     $13
        move    NmIntP,TEMP
        jmp     $0
$13     clc
        adc     #030
        sta     SltNum
        move    NmCrdP,TEMP
$0      ldy     #0
$1      lda     @TEMP,y
        sta     NmSfx,y
        beq     $9
        iny
        bne     $1
$9      rts

        .end
