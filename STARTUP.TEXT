(*
 * Copyright 2020 Craig McGeachie
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Licnese is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *)
{$U-}

program Kernel;

{$I GLOBALS.TEXT}

    segment procedure StartTime(dummy1, dummy2: integer);
    
    type
        byte = 0..255;
        (* Types and routine declarations are copied inline, instead of
        using the Clock unit. Values returned from the clock unit are
        corrupted. Possibly due to this being a system program. *)
        daterec = packed record
            month: 0..12;
            day  : 0..31;
            year : 0..100
        end {daterec};
        timerec = packed record
            hour   : 0..23;
            minute : 0..59;
            second : 0..59
        end; {timerec}
        clockrec = record
            date: daterec;
            time: timerec;
        end {clockrec};
    
    var
        hasClock:boolean;
        now:clockrec;
        dirinfo:directory;
        bootunit:unitnum;
        
        function InitClock:boolean;
        external;
        
        procedure ReadClock(var now:clockrec);
        external;
        
        procedure ClockName(var name:string);
        external;
        
        function peek(address:integer):byte;
        
        type
            varrec = packed array[0..0] of byte;
        
        var
            mem : record case boolean of
                false : ( addr : integer );
                true : ( val : ^varrec )
            end {mem};
        
        begin
            mem.addr := address;
            peek := mem.val^[0];
        end;
        
        procedure WriteDate(date:daterec);
        
        begin
            with date do begin
                write(day,'-');
                case month of
                    1 : write('Jan');
                    2 : write('Feb');
                    3 : write('Mar');
                    4 : write('Apr');
                    5 : write('May');
                    6 : write('Jun');
                    7 : write('Jul');
                    8 : write('Aug');
                    9 : write('Sep');
                    10: write('Oct');
                    11: write('Nov');
                    12: write('Dec');
                    otherwise write('???')
                end;
                write('-',year);
            end;
        end;
        
        procedure PadTimeField(value:integer; var result:string);
        
        begin
            result := '??';
            if (value >= 0) and (value <= 99) then begin
                result[1] := chr(ord('0')+value div 10);
                result[2] := chr(ord('0')+value mod 10)
            end;
        end;
        
        procedure WriteTime(time:timerec);
        
        var
            field:string;
        
        begin
            with time do begin
                PadTimeField(hour,field);
                write(field,':');
                PadTimeField(minute,field);
                write(field,':');
                PadTimeField(second,field);
                write(field);
            end
        end;

        procedure greeting;
        
        var
            version, systype: byte;
            count:integer;
            cname:string;
        
        begin
            version := peek(-16607);
            systype := (peek(-16606) div 32) mod 4;
            page(output);
            for count := 1 to 8 do
                writeln;
            write('Welcome ',syvid,', to Apple II Pascal ');
            case version of
                2:writeln('1.1');
                3:writeln('1.2');
                4:writeln('1.3');
                otherwise writeln('?.?');
            end;
            writeln;
            writeln('Based on UCSD Pascal II.1');
            writeln;
            if hasClock then begin
                write('Current time and date is ');
                WriteTime(now.time);
                write(', ');
                WriteDate(thedate);
                writeln();
                ClockName(cname);
                writeln(cname)
            end else begin
                write('Current date is ');
                WriteDate(thedate);
                writeln();
                writeln('<No clock present>')
            end;
            writeln;
            write('Pascal system size is ');
            case systype of
                0:writeln('64K');
                1:writeln('48K');
                2:writeln('128K');
                otherwise writeln('??K');
            end;
            writeln;
            writeln;
            writeln;
            write('Copyright Apple Computer 1979,1980');
            if version >= 3 then
                write(',1983');
            if version >= 4 then
                write(',1984,1985');
            writeln;
            writeln('Copyright U.C. Regents 1979');
         end;
     
     begin
         hasClock := InitClock;
         if hasClock then begin
             ReadClock(now);
             thedate := now.date;
             bootunit := syscom^.sysunit;
             unitread(bootunit, dirinfo, sizeof(directory), DIRBLK);
             
             if ioresult <> 0 then
                 exit(StartTime);
             
             if dirinfo[0].dvid <> syvid then
                 exit(StartTime);
             
             dirinfo[0].dlastboot := now.date;
             unitwrite(bootunit, dirinfo, sizeof(directory), DIRBLK);
         end;
         
         greetings;
         
     end;
    
begin
end.
