unit SYSSTUFF;

interface

(******************************************************************)
(*                                                                *)
(*  Copyright (c) 1978 Regents of the University of California.   *)
(*  Permission to copy or distribute this software or documen-    *)
(*  tation in hard or soft copy granted only by written license   *)
(*  obtained from the Institute for Information Systems.          *)
(*                                                                *)
(******************************************************************)


(************************************************)
(*                                              *)
(*    UCSD PASCAL OPERATING SYSTEM              *)
(*                                              *)
(*    RELEASE LEVEL:  I.3   AUGUST, 1977        *)
(*                    I.4   JANUARY, 1978       *)
(*                    I.5   SEPTEMBER, 1978     *)
(*                    II.0  FEBRUARY, 1979 BD   *)
(*                                              *)
(*    WRITTEN BY ROGER T. SUMNER                *)
(*    WINTER 1977                               *)
(*                                              *)
(*    INSTITUTE FOR INFORMATION SYSTEMS         *)
(*    UC SAN DIEGO, LA JOLLA, CA                *)
(*                                              *)
(*    KENNETH L. BOWLES, DIRECTOR               *)
(*                                              *)
(************************************************)

CONST
    MMAXINT = 32767;   {Maximum integer value}
    MAXUNIT = 20;      {Maximum physical unit # for UREAD}
    MAXDIR = 77;       {Max number of entries in a directory}
    VIDLENG = 7;       {Number of chars in a volume ID}
    TIDLENG = 15;      {Number of chars in a title ID}
    MAX_SEG = 31;      {Max code segment number}
    FBLKSIZE = 512;    {Standard disk block length}
    DIRBLK = 2;        {Disk addr of directory}
    AGELIMIT = 300;    {Max age for GDIRP...in ticks}
    EOL = 13;          {End-of-line...ASCII CR}
    DLE = 16;          {Blank compression code}
    NAME_LEN = 23;     {Length of CONCAT(VIDLENG,':',TIDLENG)}
    FILL_LEN = 11;     {Maximum # of nulls in FILLER}

TYPE
    IORSLTWD = (
        INOERROR,IBADBLOCK,IBADUNIT,IBADMODE,ITIMEOUT,
        ILOSTUNIT,ILOSTFILE,IBADTITLE,INOROOM,INOUNIT,
        INOFILE,IDUPFILE,INOTCLOSED,INOTOPEN,IBADFORMAT,
        ISTRGOVFL
    );

    {Command states...see GETCMD}
    CMDSTATE = (
        HALTINIT,DEBUGCALL,
        UPROGNOU,UPROGUOK,SYSPROG,
        COMPONLY,COMPANDGO,COMPDEBUG,
        LINKANDGO,LINKDEBUG
    );

    {Code files used in GETCMD}
    SYSFILE = (ASSEMBLER,COMPILER,EDITOR,FILER,LINKER);

    {Archival info...the date}
     DATEREC = PACKED RECORD
        MONTH: 0..12;          {0 implies date not meaningful}
        DAY: 0..31;            {Day of month}
        YEAR: 0..100           {100 is temp disk flag}
    END {DATEREC};

    {Volume tables}
    UNITNUM = 0..MAXUNIT;
    VID = STRING[VIDLENG];

    {Disk directories}
    DIRRANGE = 0..MAXDIR;
    TID = STRING[TIDLENG];
    FULL_ID = STRING[NAME_LEN];

    FILE_TABLE = ARRAY [SYSFILE] OF FULL_ID;

    FILEKIND = (
        UNTYPEDFILE,XDSKFILE,CODEFILE,TEXTFILE,
        INFOFILE,DATAFILE,GRAFFILE,FOTOFILE,SECUREDIR
    );

    DIRENTRY = PACKED RECORD
        DFIRSTBLK: INTEGER;   {First physical disk addr}
        DLASTBLK: INTEGER;    {Points at block folloing}
        CASE DFKIND: FILEKIND OF
        SECUREDIR,
        UNTYPEDFILE: ( {Only in DIR[0]...volume info}
            FILLER1 : 0..2048; {for downward compatibility,13 bits}
            DVID: VID;              {Name of disk volume}
            DEOVBLK: INTEGER;       {LASTBLK of volume}
            DNUMFILES: DIRRANGE;    {Num files in dir}
            DLOADTIME: INTEGER;     {Time of last access}
            DLASTBOOT: DATEREC      {Most recent date setting}
        );
        XDSKFILE,CODEFILE,TEXTFILE,INFOFILE,
        DATAFILE,GRAFFILE,FOTOFILE: (
            FILLER2 : 0..1024; {for downward compatibility}
            STATUS : BOOLEAN;       {for FILER wildcards}
            DTID: TID;              {Title of file}
            DLASTBYTE: 1..FBLKSIZE; {Num bytes in last block}
            DACCESS: DATEREC        {Last modification date}
        )
    END {DIRENTRY} ;

    DIRP = ^DIRECTORY;

    DIRECTORY = ARRAY [DIRRANGE] OF DIRENTRY;

    {File information}
    CLOSETYPE = (CNORMAL,CLOCK,CPURGE,CCRUNCH);
    WINDOWP = ^WINDOW;
    WINDOW = PACKED ARRAY [0..0] OF CHAR;
    FIBP = ^FIB;

    FIB = RECORD
        FWINDOW: WINDOWP;  {User window...F^, used by GET-PUT}
        FEOF,FEOLN: BOOLEAN;
        FSTATE: (FJANDW,FNEEDCHAR,FGOTCHAR);
        FRECSIZE: INTEGER; {In bytes...0=>BLOCKFILE, 1=>CHARFILE}
        CASE FISOPEN: BOOLEAN OF
        TRUE: (
            FISBLKD: BOOLEAN; {File is on block device}
            FUNIT: UNITNUM;   {Physical unit #}
            FVID: VID;        {Volume name}
            FREPTCNT,         {# times F^ valid w/o GET}
            FNXTBLK,          {Next rel block to IO}
            FMAXBLK: INTEGER; {Max rel block accessed}
            FMODIFIED:BOOLEAN;{Please set new date in close}
            FHEADER: DIRENTRY;{Cope of disk dir entry}
            CASE FSOFTBUF: BOOLEAN OF {Disk GET-PUT stuff}
            TRUE: (
                FNXTBYTE,FMAXBYTE: INTEGER;
                FBUFCHNGD: BOOLEAN;
                FBUFFER: PACKED ARRAY [0..FBLKSIZE] OF CHAR
            )
        )
    END {FIB} ;

    {USER WORKFILE STUFF}
    INFOREC = RECORD
        SYMFIBP,CODEFIBP: FIBP;        {Workfiles for scratch}
        ERRSYM,ERRBLK,ERRNUM: INTEGER; {Error stuff in edit}
        SLOWTERM,STUPID: BOOLEAN;      {STUdent Programmer ID!!}
        ALTMODE: CHAR;                 {Washout char for compiler}
        GOTSYM,GOTCODE: BOOLEAN;       {Titles are meaningful}
        WORKVID,SYMVID,CODEVID: VID;   {Permanent and current workfile volumes}
        WORKTID,SYMTID,CODETID: TID    {Permanent and current workfile titles}
    END {INFOREC} ;

    {Code segment layouts}
    SEG_RANGE = 0..MAX_SEG;
    SEG_DESC = RECORD
        DISKADDR: INTEGER;     {Rel blk in code...abs in SYSCOM^}
        CODELENG: INTEGER      {# bytes to read in}
    END {SEGDESC} ;

    {Debugger stuff}
    BYTERANGE = 0..255;
    TRICKARRAY = RECORD        {Memory diddling for execerror}
        CASE BOOLEAN OF
        TRUE : ( WORD : ARRAY [0..0] OF INTEGER );
        FALSE : ( BYTE : PACKED ARRAY [0..0] OF BYTERANGE )
    END {TRICKARRAY};
    MSCWP = ^MSCW;            {Mark stack record pointer}
    MSCW = RECORD
        STATLINK: MSCWP;  {Pointer to parent MSCW}
        DYNLINK: MSCWP;   {Pointer to caller's MSCW}
        MSSEG,MSJTAB: ^TRICKARRAY;
        MSIPC: INTEGER;
        LOCALDATA: TRICKARRAY
    END {MSCW} ;

    {System communications area}
    {see interpreters...note that we assume backward field allocation is done}
    SEG_ENTRY = RECORD
        CODEUNIT: UNITNUM;
        CODEDESC: SEGDESC
    END {SEG_ENTRY};

    SYSCOMREC = RECORD
        IORSLT: IORSLTWD;    {Result of last IO call}
        XEQERR: INTEGER;     {Reason for EXECERROR call}
        SYSUNIT: UNITNUM;    {Physical unit of BOOTLOAD}
        BUGSTATE: INTEGER;   {Debugger info}
        GDIRP: DIRP;         {Global dir pointer, see VOLSEARCH}
        LASTMP,STKBASE,BOMBP: MSCWP;
        MEMTOP,SEG,JTAB: INTEGER;
        BOMBIPC: INTEGER;    {Where XEQERR blowup was}
        HLTLINE: INTEGER;    {More debugger stuff}
        BRKPTS: ARRAY [0..3] OF INTEGER;
        RETRIES: INTEGER;    {Drivers PUT retry counts}
        EXPANSION: ARRAY [0..8] OF INTEGER;
        HIGHTIME,LOWTIME: INTEGER;
        MISCINFO: PACKED RECORD
            NOBREAK,STUPID,SLOWTERM,
            HASXYCRT,HASLCCRT,HAS8510A,HASCLOCK: BOOLEAN;
            USERKIND:(NORMAL, AQUIZ, BOOKER, PQUIZ);
            WORD_MACH, IS_FLIPT : BOOLEAN
        END;
        CRTTYPE: INTEGER;
        CRTCTRL: PACKED RECORD
            RLF,NDFS,ERASEEOL,ERASEEOS,HOME,ESCAPE: CHAR;
            BACKSPACE: CHAR;
            FILLCOUNT: 0..255;
            CLEARSCREEN, CLEARLINE: CHAR;
            PREFIXED: PACKED ARRAY [0..15] OF BOOLEAN
        END;
        CRTINFO: PACKED RECORD
            WIDTH,HEIGHT: INTEGER;
            RIGHT,LEFT,DOWN,UP: CHAR;
            BADCH,CHARDEL,STOP,BREAK,FLUSH,EOF: CHAR;
            ALTMODE,LINEDEL: CHAR;
            ALPHA_LOCK,ETX,PREFIX: CHAR;
            PREFIXED: PACKED ARRAY [0..15] OF BOOLEAN
        END;
        SEGTABLE: ARRAY [SEG_RANGE] OF SEG_ENTRY;
    END {SYSCOM};

    MISCINFOREC = RECORD
        MSYSCOM: SYSCOMREC
    END;

    SYSGLOBREC = RECORD
        SYSCOM: ^SYSCOMREC;             {Magic param...set up in boot}
        GFILES: ARRAY [0..5] OF FIBP;   {Global files, 0=INPUT, 1=OUTPUT}
        USERINFO: INFOREC;              {Work stuff for compiler etc}
        EMPTYHEAP: ^INTEGER;            {Heap mark for mem managing}
        INPUTFIB,OUTPUTFIB,             {Console files...GFILES are copies}
        SYSTERM,SWAPFIB: FIBP;          {Control and swapspace files}
        SYVID,DKVID: VID;               {System volume ID & default volume ID}
        THEDATE: DATEREC;               {Today...set in filer or sign on}
        DEBUGINFO: ^INTEGER;            {Debuggers global info while running}
        STATE: CMDSTATE;                {For GETCOMMAND}
        PL: STRING;                     {PROMPTLINE string...see PROMPT}
        IPOT: ARRAY [0..4] OF INTEGER;  {Integer powers of ten}
        FILLER: STRING[FILL_LEN];       {Nulls for carriage delay}
        DIGITS: SET OF '0'..'9';
        UNITABLE: ARRAY [UNITNUM] OF RECORD {0 not used}
            UVID: VID;    {Volumne ID for unit}
            CASE UISBLKD: BOOLEAN OF
            TRUE: (
                UEOVBLK: INTEGER
            )
        END {UNITABLE} ;
        FILENAME : FILE_TABLE;
    END {SYSGLOBREC};

    SYSGLOBP = ^SYSGLOBREC;

function RDSYSGLOB:SYSGLOBP;

implementation

function RDSYSGLOB;
external;

end.
